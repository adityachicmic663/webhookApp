@page "/webhook"
@inject HttpClient Http
@inject NavigationManager Navigation
@using WebHookApp.Client.Models
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client

<h3>Webhook URL Generator</h3>

@if (!string.IsNullOrEmpty(webhookUrl?.url))
{
    <p>Webhook URL: <strong>@webhookUrl.url</strong></p>
    <p>Use this URL to send requests.</p>
}
else
{
    <p>Loading Webhook URL...</p>
}

<h4>Requests Received</h4>
<table class="table">
    <thead>
        <tr>
            <th>Path</th>
            <th>Method</th>
            <th>Date/Time</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @* @foreach (var request in webhookRequests)
        {
            <tr>
                <td>@request.path</td>
                <td>@request.method</td>
                <td>@request.timeStamp.ToString("g")</td>
                <td><button @onclick="() => ViewDetails(request)">View</button></td>
            </tr>
        } *@
    </tbody>
</table>

@if (selectedRequest != null)
{
    <h5>Request Details</h5>
    <p><strong>IP Address:</strong> @selectedRequest.ipAddress</p>
    <p><strong>User-Agent:</strong> @selectedRequest.userAgent</p>
    <p><strong>Headers:</strong> @selectedRequest.headers</p>
    <p><strong>Body:</strong> @selectedRequest.body</p>
    <p><strong>Query Parameters:</strong> @selectedRequest.queryParams</p>
    <p><strong>Files:</strong> @selectedRequest.filePath</p>
}

@code {
    private webHookUrlResponse webhookUrl = new();
    private List<webHookRequest> webhookRequests = new();
    private webHookRequest selectedRequest;
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        // Generate webhook URL and initialize SignalR connection if successful
        await GenerateUrl();

     /*   if (!string.IsNullOrEmpty(webhookUrl?.url))
        {
            InitializeHubConnection();
            await hubConnection.StartAsync();
            await GetWebhookRequests();
        }
        else
        {
            Console.Error.WriteLine("Failed to load webhook URL.");
        }*/
    }

    private async Task GenerateUrl()
    {
        try
        {
            var response = await Http.GetAsync("api/WebHook");
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseModel>();
                if (result != null && result.data is webHookUrlResponse responseUrl && !string.IsNullOrEmpty(responseUrl.url))
                {
                    webhookUrl = responseUrl;
                    Console.WriteLine($"Generated Webhook URL: {webhookUrl.url}");
                }
                else
                {
                    Console.Error.WriteLine("Error: Generated URL response is null or empty.");
                }
            }
            else
            {
                Console.Error.WriteLine("Failed to generate Webhook URL.");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error generating Webhook URL: {ex.Message}");
        }
    }


    /*private void InitializeHubConnection()
    {
        // Configure SignalR connection for real-time updates
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/webHookHub"))
            .Build();

        // Listen for incoming webhook requests in real-time
        hubConnection.On<webHookRequest>("ReceivedWebHubRequest", (request) =>
        {
            webhookRequests.Add(request);
            StateHasChanged(); // Update the UI
        });
    }

    private async Task GetWebhookRequests()
    {
        try
        {
            // Retrieve past webhook requests associated with this URL
            var response = await Http.GetAsync($"api/WebHook/getRequestById/{webhookUrl.urlId}");
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseModel>();
                webhookRequests = result?.data as List<webHookRequest> ?? new();
            }
            else
            {
                Console.Error.WriteLine("Failed to retrieve webhook requests.");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error retrieving webhook requests: {ex.Message}");
        }
    }

    private void ViewDetails(webHookRequest request)
    {
        // Display detailed information for the selected request
        selectedRequest = request;
    }*/
}
