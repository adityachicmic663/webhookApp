@page "/webhook"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using System.Text.Json
@using WebHookApp.Client.Models
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client

<h3 class="page-title">Webhook URL Generator</h3>

@if (!string.IsNullOrEmpty(webhookUrl?.url))
{
   <div class="webhook-box">
        <p>Webhook URL: <strong>@webhookUrl.url</strong></p>
        <p>Use this URL to send requests.</p>
   </div>
   
}
else
{
    <p class="loading-text">Loading Webhook URL...</p>
}

<h4 class="request-title">Requests Received</h4>
<div class="requests-container">
    <table class="table">
        <thead>
            <tr>
                <th>Path</th>
                <th>Method</th>
                <th>Date/Time</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var request in webhookRequests)
            {
                <tr>
                    <td>@request.path</td>
                    <td>@request.method</td>
                    <td>@request.timeStamp.ToString("g")</td>
                    <td><button class="btn-view" @onclick="() => ViewDetails(request)">View</button></td>
                </tr>
            }
        </tbody>
    </table>
</div>



@code {
    private webHookUrlResponse webhookUrl;
    private List<webHookRequest> webhookRequests=new();
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
       
            await GenerateUrl();
           
        if (!string.IsNullOrEmpty(webhookUrl?.url))
        {
            webhookRequests.Clear();
            InitializeHubConnection();
            await hubConnection.StartAsync();
            await GetWebhookRequests();
        }
        else
        {
            Console.Error.WriteLine("Failed to load webhook URL.");
        }
    }

    private async Task GenerateUrl()
    {
        try
        {
            var response = await Http.GetAsync("api/WebHook");
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseModel>();
                if (result != null /* && result.data is webHookUrlResponse responseUrl && !string.IsNullOrEmpty(responseUrl.url) */)
                {
                    webhookUrl = JsonSerializer.Deserialize<webHookUrlResponse>(JsonSerializer.Serialize(result.data));
                    Console.WriteLine($"Generated Webhook URL: {webhookUrl.url}");
                }
                else
                {
                    Console.Error.WriteLine("Error: Generated URL response is null or empty.");
                }
            }
            else
            {
                Console.Error.WriteLine("Failed to generate Webhook URL.");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error generating Webhook URL: {ex.Message}");
        }
    }


    private void InitializeHubConnection()
    {
        // Configure SignalR connection for real-time updates
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/webHookHub"))
            .Build();

        // Listen for incoming webhook requests in real-time
        hubConnection.On<webHookRequest>("ReceivedWebHubRequest", (request) =>
        {
            var webhookPath = new Uri(webhookUrl.url).AbsolutePath;

            if (request.path.StartsWith(webhookPath))
            {
                if (!webhookRequests.Any(r => r.requestId == request.requestId))
                {
                    webhookRequests.Add(request);
                    StateHasChanged(); // Update the UI
                }
             }  
        });
    }

    private async Task GetWebhookRequests()
    {
        try
        {
            // Retrieve past webhook requests associated with this URL
            var response = await Http.GetAsync($"api/WebHook/getRequestById/{webhookUrl.urlId}");
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseModel>();
                webhookRequests = result?.data as List<webHookRequest> ?? new();
            }
            else
            {
                Console.Error.WriteLine("Failed to retrieve webhook requests.");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error retrieving webhook requests: {ex.Message}");
        }
    }

    private void ViewDetails(webHookRequest request)
    {
        var url = $"/webhook/details/{request.requestId}";
        JS.InvokeVoidAsync("openNewTab", url);
    }
}
