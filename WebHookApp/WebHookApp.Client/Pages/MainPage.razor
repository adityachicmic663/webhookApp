@page "/webhook"
@inject HttpClient Http
@using WebHookApp.Client.Models
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.SignalR.Client

<h3>Webhook URL Generator</h3>
<button @onclick="GenerateUrl">Generate Webhook URL</button>

@if (!string.IsNullOrEmpty(@webhookUrl.url))
{
    <p>Webhook URL: <strong>@webhookUrl.url</strong></p>
    <p>Use this URL to send requests.</p>
}

<h4>Requests Received</h4>
<table class="table">
    <thead>
        <tr>
            <th>Path</th>
            <th>Method</th>
            <th>Date/Time</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var request in webhookRequests)
        {
            <tr>
                <td>@request.path</td>
                <td>@request.method</td>
                <td>@request.timeStamp.ToString("g")</td>
                <td><button @onclick="() => ViewDetails(request)">View</button></td>
            </tr>
        }
    </tbody>
</table>

@if (selectedRequest != null)
{
    <h5>Request Details</h5>
    <p><strong>IP Address:</strong> @selectedRequest.ipAddress</p>
    <p><strong>User-Agent:</strong> @selectedRequest.userAgent</p>
    <p><strong>Headers:</strong> @selectedRequest.headers</p>
    <p><strong>Body:</strong> @selectedRequest.body</p>
    <p><strong>Query Parameters:</strong> @selectedRequest.queryParams</p>
    <p><strong>Files:</strong> @selectedRequest.filePath</p>
}

@code {
    private webHookUrlResponse   webhookUrl;
    private List<webHookRequest> webhookRequests = new List<WebHookRequest>();
    private webHookRequest selectedRequest;
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/webHookHub"))
            .Build();

        hubConnection.On<WebHookRequest>("ReceivedWebHubRequest", (request) =>
        {
            webhookRequests.Add(request);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await GetWebhookRequests();
    }

    private async Task GenerateUrl()
    {
        var response = await Http.GetAsync("api/WebHook");
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<ResponseModel>();
            webhookUrl.url = result.data.ToString();
        }
    }

    private async Task GetWebhookRequests()
    {
        var response = await Http.GetAsync("api/WebHook/requests");
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<ResponseModel>();
            webhookRequests = ((List<WebHookRequest>)result.data) ?? new List<WebHookRequest>();
        }
    }

    private void ViewDetails(WebHookRequest request)
    {
        selectedRequest = request;
    }
}
